<!-- If you wish to turn off checking for a section of code, you can put a comment in the source
 before and after the section, with the following syntax: -->
<!-- // scalastyle:off {idWarning}-->
<!-- ... -->
<!-- // naughty stuff -->
<!-- ... -->
<!-- // scalastyle:on {idWarning}-->


<scalastyle commentFilter="enable">
    <name>Scalastyle Suramericana Configuration</name>
    <check level="warning" class="org.scalastyle.file.FileTabChecker" enabled="false"></check>
    <check level="warning" class="org.scalastyle.file.FileLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxFileLength"><![CDATA[800]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.file.HeaderMatchesChecker" enabled="false">
        <parameters>
            <parameter name="header"><![CDATA[// Copyright (C) 2011-2012 the original author or authors.
// See the LICENCE.txt file distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[160]]></parameter>
            <parameter name="tabSize"><![CDATA[4]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
        <parameters>
            <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
        <parameters>
            <parameter name="maxParameters"><![CDATA[9]]></parameter> 
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="false">
        <parameters>
            <parameter name="ignore"><![CDATA[-1,0,1,2,3]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker"
           enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker"
           enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"></check>
    <check customId="nullchecker" level="warning" class="org.scalastyle.scalariform.NullChecker" enabled="true">
        <customMessage>Avoid using null</customMessage>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[println]]></parameter>
        </parameters>
        <customMessage>No se debe incluir println, por favor use log.[debug, info, etc.]</customMessage>
    </check>
    <check level="warning" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[Created by]]></parameter>
        </parameters>
        <customMessage>No se debe incluir comentarios de autor, la historia queda en git</customMessage>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^InstanceOf$]]></parameter>
            <customMessage>Avoid isInstanceOf or asInstanceOf.</customMessage>
        </parameters>
    </check>
    <check customId="numTypesDeclared" level="warning" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
        <parameters>
            <parameter name="maxTypes"><![CDATA[30]]></parameter>
            <customMessage>Number of types declared in the file exceeds 30</customMessage>
        </parameters>
    </check>
    <check customId="cyclomaticcomplecity" level="warning"
           class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
        <parameters>
            <parameter name="maximum"><![CDATA[10]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.IfBraceChecker" enabled="false">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[false]]></parameter>
        </parameters>
    </check>
    <check customId="methodLengthChecker" level="warning" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLength"><![CDATA[100]]></parameter>
            <customMessage>Number of lines in the method exceeds 100</customMessage>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]|\**$]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[^A-Z].*$]]></parameter>
            <customMessage>Method name should not start with an upper case letter.</customMessage>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
        <parameters>
            <parameter name="maxMethods"><![CDATA[30]]></parameter>
        </parameters>
    </check>
    <check customId="method.public.type" level="warning" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker"
           enabled="true">
        <customMessage>Public method must have explicit type</customMessage>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.VarFieldChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.VarLocalChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.WhileChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.RedundantIfChecker" enabled="true"></check>
    <check level="warning" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"/>
    <check customId="mutablecollections" level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^(ArrayList|ArrayBuffer|mutable)$]]></parameter>
            <customMessage>Avoid using mutable collections.</customMessage>
        </parameters>
    </check>
</scalastyle>
